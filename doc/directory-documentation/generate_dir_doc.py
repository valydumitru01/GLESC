import os

# Customizable section
EXCLUDED_DIRS = [
    "./doc/doxy/generated-doxy",
    "./doc/cppdepend/CppDependOut",
    "./.git",
    "./.idea",
]

DIR_COMMENTS = {
    "./assets": "This directory contains all the game assets which are essential for rendering graphics and sounds. Assets include fonts, images, shaders, and sound files.",
    "./assets/fonts": "Stores font files used in the game for text rendering. Example files: Arial.ttf, Verdana.ttf.",
    "./assets/images": "Contains various image files used in the game for textures, sprites, and UI elements.",
    "./assets/images/cubemaps": "Cubemap images used for creating skyboxes and environment mapping. Example subdirectories: skyboxes/default/, skyboxes/sea-day/.",
    "./assets/images/icons": "Icon files used in the game UI for buttons, menus, and other interactive elements. Example files: play_icon.png, settings_icon.png.",
    "./assets/images/sprites": "Sprite sheets and individual sprite images used for character and object animations. Example subdirectories: sprites/engine-debug/.",
    "./assets/images/textures": "Texture files for game objects and environments, applied to 3D models and 2D elements. Example files: brick_texture.jpg, wood_texture.png.",
    "./assets/shaders": "Shader programs used for rendering graphics. Shaders are small programs that run on the GPU. Example files: vertex_shader.glsl, fragment_shader.glsl.",
    "./assets/sounds": "Sound files such as sound effects and background music, which are crucial for the audio experience in the game. Example files: explosion_sound.wav, background_music.mp3.",

    "./bin": "Contains compiled binary files. This is where the executable files and related binary outputs are stored after the build process.",
    "./bin/debug": "Debug build output files, including the executable for debugging. This allows developers to run and debug the program with additional debug information.",
    "./bin/debug/CMakeFiles": "CMake files related to the debug build, containing configuration and intermediate files generated by CMake during the build process.",
    "./bin/release": "Release build output files, including the optimized executable for distribution. These files are typically optimized for performance and do not contain debug information.",
    "./bin/release/CMakeFiles": "CMake files related to the release build, similar to the debug directory but for the optimized release version.",

    "./cmake": "CMake configuration files for building the project. CMake is a build system generator that helps manage the build process in a platform-independent manner.",
    "./cmake/core": "Core CMake scripts and modules, including the main configuration files that define how the project is built. Example files: flags.cmake, dependencies.cmake.",
    "./cmake/modules": "Additional CMake modules and scripts that provide extra functionality or handle specific tasks during the build process. Example files: print.cmake, include.cmake.",

    "./doc": "This directory contains all documentation-related files for the project. It includes everything from general project documentation to specific details about code architecture, usage, and diagrams.",
    "./doc/cppdepend": "This directory contains files and reports generated by CppDepend, a static analysis tool for C++ projects. These reports provide insights into code quality, dependencies, and potential improvements.",
    "./doc/diagrams": "Contains various diagrams that illustrate the architecture, workflows, and processes within the project. These are often used for both design and documentation purposes. Example files: architecture_diagram.png, class_hierarchy.uml.",
    "./doc/directory-documentation": "Documentation specific to the directory structure of the project. This includes explanations of the purpose and contents of each directory and guidelines for organizing files. Example files: dir_structure.md, dir_overview.pdf.",
    "./doc/doxy": "Contains Doxygen configuration files and generated documentation. Doxygen is a tool used to generate documentation from annotated source code.",
    "./doc/doxy/custom-doxy": "Custom Doxygen configuration files and templates. These files define how the Doxygen documentation should be generated and customized for the project. Example files: custom_header.html.",
    "./doc/doxy/generated-doxy": "Generated Doxygen documentation files. These files are automatically generated by Doxygen based on the source code and annotations in the code.",
    "./doc/gifs": "This directory holds GIF files used for documentation purposes. These may include animations demonstrating features, workflows, or other dynamic content. Example files: demo_animation.gif, feature_walkthrough.gif.",
    "./doc/images": "Contains image files used in the documentation. These can include screenshots, diagrams, and other visual aids that help explain various aspects of the project. Example files: screenshot1.png, workflow_diagram.svg.",

    "./include": "Header files for the project, which declare the interfaces for various modules and components. These files are included in the source files to use the declared functions and classes.",
    "./include/engine": "Header files specific to the game engine, including core functionalities, rendering, and other subsystems. Example subdirectories: core/, ecs/, res-mng/, scene/, subsystems/.",
    "./include/game": "Header files for game-specific components, such as player characters, enemies, levels, and game logic. These files define the interfaces for game objects and behaviors.",

    "./lib": "Third-party libraries and their headers. These libraries are used to extend the functionality of the project without having to reinvent common features.",
    "./lib/bin": "Dynamic link libraries (DLLs) and shared object files for third-party libraries. These files contain the compiled code that can be loaded at runtime by the project.",
    "./lib/include": "Header files for third-party libraries, allowing the project to use the functions and classes provided by these libraries. Example subdirectories: GL/, SDL2/, glm/.",
    "./lib/lib": "Static libraries and shared object files for third-party libraries. These files contain the compiled code that can be linked against the project during the build process.",

    "./src": "Source files for the project, including the implementation of the game engine and other core components. This is where the main development happens.",
    "./src/engine": "Source files for the game engine, implementing core functionalities, rendering, and other subsystems. Example subdirectories: core/, ecs/, res-mng/, scene/, subsystems/.",

    "./tests": "Test files for the project, including unit tests and integration tests to ensure the quality and correctness of the code.",
    "./tests/unit": "This directory contains unit tests for the project, which are used to test individual components and functions to ensure they work as expected. Unit tests are typically written to cover all possible edge cases and scenarios for each function or module.",
    "./tests/unit/engine": "Contains unit tests for the core engine components. These tests ensure that the fundamental parts of the game engine work correctly.",
    "./tests/unit/engine/core": "Unit tests for the core functionalities of the engine, such as mathematical operations, debugging tools, and core system utilities.",
    "./tests/unit/engine/core/math": "Unit tests for mathematical operations and utilities, including algebra, geometry, and random number generation.",
    "./tests/unit/engine/core/math/algebra": "Tests for algebraic operations, including matrix and vector operations. These tests ensure that mathematical computations are accurate.",
    "./tests/unit/engine/core/math/algebra/matrix": "Unit tests specifically for matrix operations, ensuring correctness of matrix manipulations.",
    "./tests/unit/engine/core/math/algebra/vector": "Unit tests specifically for vector operations, ensuring correctness of vector calculations.",
    "./tests/unit/engine/core/math/geometry": "Tests for geometric calculations, ensuring correctness of operations related to geometric figures.",
    "./tests/unit/engine/core/math/random-generator": "Unit tests for random number generators, ensuring that they produce numbers within expected ranges and distributions.",
    "./tests/unit/engine/core/window": "Unit tests for window management functionalities, ensuring that window creation, manipulation, and destruction work as expected. Example files: test_window_creation.cpp, test_window_events.cpp.",
    "./tests/unit/engine/ecs": "Unit tests for the Entity Component System (ECS), which is a core architectural pattern used in the game engine for organizing game logic.",
    "./tests/unit/engine/ecs/backend": "Tests for the backend of the ECS, ensuring that entities, components, and systems are managed correctly. Example files: test_entity_manager.cpp, test_component_storage.cpp.",
    "./tests/unit/engine/ecs/backend/component": "Unit tests for component management, ensuring that components can be added, removed, and retrieved correctly.",
    "./tests/unit/engine/ecs/backend/entity": "Unit tests for entity management, ensuring that entities can be created, destroyed, and manipulated correctly.",
    "./tests/unit/engine/ecs/backend/system": "Unit tests for system management, ensuring that systems can be registered, updated, and interact with entities and components correctly."
}
def create_html_entry(dir_path, depth):
    indent = "    " * depth
    dir_name = os.path.basename(dir_path)
    comment = DIR_COMMENTS.get(dir_path, "")
    html = f"{indent}<li>\n"
    html += f"{indent}  <details>\n"
    html += f"{indent}    <summary>{dir_name}</summary>\n"
    if comment:
        html += f"{indent}    <p>{comment}</p>\n"
    html += f"{indent}    <ol>\n"
    return html

def close_html_entry(depth):
    indent = "    " * depth
    return f"{indent}    </ol>\n{indent}  </details>\n{indent}</li>\n"

def is_excluded_dir(dir_path: str):
    for excluded in EXCLUDED_DIRS:
        if dir_path.startswith(excluded):
            return True
    return False

def generate_docs(root_dir):
    html_content = "<!DOCTYPE html>\n<html>\n<head>\n"
    html_content += "<link rel='stylesheet' href='./folder_structure.css'>\n"
    html_content += "<title>Folder Structure Documentation</title>\n"
    html_content += "</head>\n<body>\n"
    html_content += "<h1>Folder Structure Documentation</h1>\n"
    html_content += "<p>This README is about the description of folders in the project. Below is a list of all folders and their descriptions.</p>\n"
    html_content += "<ol>\n"

    previous_depth = -1
    for dirpath, dirnames, _ in os.walk(root_dir):
        dirpath = os.path.normpath(dirpath)
        if is_excluded_dir(dirpath):
            continue
        depth = dirpath.count(os.sep) - root_dir.count(os.sep)
        if depth > previous_depth:
            html_content += create_html_entry(dirpath, depth)
        elif depth == previous_depth:
            html_content += close_html_entry(depth)
            html_content += create_html_entry(dirpath, depth)
        else:
            while depth <= previous_depth:
                html_content += close_html_entry(previous_depth)
                previous_depth -= 1
            html_content += create_html_entry(dirpath, depth)
        previous_depth = depth

    while previous_depth >= 0:
        html_content += close_html_entry(previous_depth)
        previous_depth -= 1

    html_content += "</ol>\n</body>\n</html>\n"

    with open("doc/directory-documentation/folder-structure.html", "w") as f:
        f.write(html_content)


def normalize_paths(paths: list):
    for i in range(len(paths)):
        paths[i] = os.path.normpath(paths[i])

def normalize_paths_dict(paths_dict: dict) -> dict:
    new_dict = {}
    for key, value in paths_dict.items():
        new_key = os.path.normpath(key)
        new_dict[new_key] = value
    return new_dict

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Usage: python generate_dir_doc.py <root_directory>")
        sys.exit(1)

    normalize_paths(EXCLUDED_DIRS)
    DIR_COMMENTS=normalize_paths_dict(DIR_COMMENTS)
    root_directory = sys.argv[1]
    generate_docs(root_directory)
